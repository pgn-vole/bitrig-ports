$OpenBSD: patch-source_i18n_regexcmp_h,v 1.2 2015/04/19 09:02:06 ajacoutot Exp $

CVE-2014-7923 CVE-2014-7926 CVE-2014-9654
https://ssl.icu-project.org/trac/changeset/36727
https://ssl.icu-project.org/trac/changeset/36801

--- source/i18n/regexcmp.h.orig	Sun Apr 19 10:23:01 2015
+++ source/i18n/regexcmp.h	Sun Apr 19 10:23:07 2015
@@ -104,6 +104,13 @@ class U_I18N_API RegexCompile : public UMemory { (priv
     void        fixLiterals(UBool split=FALSE);      // Generate code for pending literal characters.
     void        insertOp(int32_t where);             // Open up a slot for a new op in the
                                                      //   generated code at the specified location.
+    void        appendOp(int32_t op);                // Append a new op to the compiled pattern.
+    void        appendOp(int32_t type, int32_t val); // Build & append a new op to the compiled pattern.
+    int32_t     buildOp(int32_t type, int32_t val);  // Construct a new pcode instruction.
+    int32_t     allocateData(int32_t size);          // Allocate space in the matcher data area.
+                                                     //   Return index of the newly allocated data.
+    int32_t     allocateStackData(int32_t size);     // Allocate space in the match back-track stack frame.
+                                                     //   Return offset index in the frame.
     int32_t     minMatchLength(int32_t start,
                                int32_t end);
     int32_t     maxMatchLength(int32_t start,
@@ -187,7 +194,9 @@ class U_I18N_API RegexCompile : public UMemory { (priv
     int32_t                       fMatchOpenParen;   // The position in the compiled pattern
                                                      //   of the slot reserved for a state save
                                                      //   at the start of the most recently processed
-                                                     //   parenthesized block.
+                                                     //   parenthesized block. Updated when processing
+                                                     //   a close to the location for the corresponding open.
+
     int32_t                       fMatchCloseParen;  // The position in the pattern of the first
                                                      //   location after the most recently processed
                                                      //   parenthesized block.
