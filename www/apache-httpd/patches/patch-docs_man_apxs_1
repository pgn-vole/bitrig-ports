$OpenBSD: patch-docs_man_apxs_1,v 1.3 2015/05/15 08:08:04 stsp Exp $
--- docs/man/apxs.1.orig	Thu Jun 20 14:31:24 2013
+++ docs/man/apxs.1	Sat Jan 10 15:28:14 2015
@@ -19,36 +19,36 @@
 .el .ne 3
 .IP "\\$1" \\$2
 ..
-.TH "APXS" 1 "2013-06-20" "Apache HTTP Server" "apxs"
+.TH "APXS2" 1 "2013-06-20" "Apache HTTP Server" "apxs2"
 
 .SH NAME
-apxs \- APache eXtenSion tool
+apxs2 \- APache eXtenSion tool
 
 .SH "SYNOPSIS"
  
 .PP
-\fBapxs\fR -\fBg\fR [ -\fBS\fR \fIname\fR=\fIvalue\fR ] -\fBn\fR \fImodname\fR
+\fBapxs2\fR -\fBg\fR [ -\fBS\fR \fIname\fR=\fIvalue\fR ] -\fBn\fR \fImodname\fR
  
 .PP
-\fBapxs\fR -\fBq\fR [ -\fBv\fR ] [ -\fBS\fR \fIname\fR=\fIvalue\fR ] \fIquery\fR \&.\&.\&.
+\fBapxs2\fR -\fBq\fR [ -\fBv\fR ] [ -\fBS\fR \fIname\fR=\fIvalue\fR ] \fIquery\fR \&.\&.\&.
  
 .PP
-\fBapxs\fR -\fBc\fR [ -\fBS\fR \fIname\fR=\fIvalue\fR ] [ -\fBo\fR \fIdsofile\fR ] [ -\fBI\fR \fIincdir\fR ] [ -\fBD\fR \fIname\fR=\fIvalue\fR ] [ -\fBL\fR \fIlibdir\fR ] [ -\fBl\fR \fIlibname\fR ] [ -\fBWc,\fR\fIcompiler-flags\fR ] [ -\fBWl,\fR\fIlinker-flags\fR ] \fIfiles\fR \&.\&.\&.
+\fBapxs2\fR -\fBc\fR [ -\fBS\fR \fIname\fR=\fIvalue\fR ] [ -\fBo\fR \fIdsofile\fR ] [ -\fBI\fR \fIincdir\fR ] [ -\fBD\fR \fIname\fR=\fIvalue\fR ] [ -\fBL\fR \fIlibdir\fR ] [ -\fBl\fR \fIlibname\fR ] [ -\fBWc,\fR\fIcompiler-flags\fR ] [ -\fBWl,\fR\fIlinker-flags\fR ] \fIfiles\fR \&.\&.\&.
  
 .PP
-\fBapxs\fR -\fBi\fR [ -\fBS\fR \fIname\fR=\fIvalue\fR ] [ -\fBn\fR \fImodname\fR ] [ -\fBa\fR ] [ -\fBA\fR ] \fIdso-file\fR \&.\&.\&.
+\fBapxs2\fR -\fBi\fR [ -\fBS\fR \fIname\fR=\fIvalue\fR ] [ -\fBn\fR \fImodname\fR ] [ -\fBa\fR ] [ -\fBA\fR ] \fIdso-file\fR \&.\&.\&.
  
 .PP
-\fBapxs\fR -\fBe\fR [ -\fBS\fR \fIname\fR=\fIvalue\fR ] [ -\fBn\fR \fImodname\fR ] [ -\fBa\fR ] [ -\fBA\fR ] \fIdso-file\fR \&.\&.\&.
+\fBapxs2\fR -\fBe\fR [ -\fBS\fR \fIname\fR=\fIvalue\fR ] [ -\fBn\fR \fImodname\fR ] [ -\fBa\fR ] [ -\fBA\fR ] \fIdso-file\fR \&.\&.\&.
  
 
 .SH "SUMMARY"
  
 .PP
-apxs is a tool for building and installing extension modules for the Apache HyperText Transfer Protocol (HTTP) server\&. This is achieved by building a dynamic shared object (DSO) from one or more source or object \fIfiles\fR which then can be loaded into the Apache server under runtime via the LoadModule directive from mod_so\&.
+apxs2 is a tool for building and installing extension modules for the Apache HyperText Transfer Protocol (HTTP) server\&. This is achieved by building a dynamic shared object (DSO) from one or more source or object \fIfiles\fR which then can be loaded into the Apache server under runtime via the LoadModule directive from mod_so\&.
  
 .PP
-So to use this extension mechanism your platform has to support the DSO feature and your Apache httpd binary has to be built with the mod_so module\&. The apxs tool automatically complains if this is not the case\&. You can check this yourself by manually running the command
+So to use this extension mechanism your platform has to support the DSO feature and your Apache httpd binary has to be built with the mod_so module\&. The apxs2 tool automatically complains if this is not the case\&. You can check this yourself by manually running the command
  
 .nf
 
@@ -57,26 +57,26 @@ So to use this extension mechanism your platform has t
 .fi
  
 .PP
-The module mod_so should be part of the displayed list\&. If these requirements are fulfilled you can easily extend your Apache server's functionality by installing your own modules with the DSO mechanism by the help of this apxs tool:
+The module mod_so should be part of the displayed list\&. If these requirements are fulfilled you can easily extend your Apache server's functionality by installing your own modules with the DSO mechanism by the help of this apxs2 tool:
  
 .nf
 
-      $ apxs -i -a -c mod_foo\&.c
+      $ apxs2 -i -a -c mod_foo\&.c
       gcc -fpic -DSHARED_MODULE -I/path/to/apache/include -c mod_foo\&.c
       ld -Bshareable -o mod_foo\&.so mod_foo\&.o
       cp mod_foo\&.so /path/to/apache/modules/mod_foo\&.so
       chmod 755 /path/to/apache/modules/mod_foo\&.so
       [activating module `foo' in /path/to/apache/etc/httpd\&.conf]
-      $ apachectl restart
-      /path/to/apache/sbin/apachectl restart: httpd not running, trying to start
+      $ apachectl2 restart
+      /path/to/apache/sbin/apachectl2 restart: httpd2 not running, trying to start
       [Tue Mar 31 11:27:55 1998] [debug] mod_so\&.c(303): loaded module foo_module
-      /path/to/apache/sbin/apachectl restart: httpd started
+      /path/to/apache/sbin/apachectl2 restart: httpd2 started
       $ _
     
 .fi
  
 .PP
-The arguments \fIfiles\fR can be any C source file (\&.c), a object file (\&.o) or even a library archive (\&.a)\&. The apxs tool automatically recognizes these extensions and automatically used the C source files for compilation while just using the object and archive files for the linking phase\&. But when using such pre-compiled objects make sure they are compiled for position independent code (PIC) to be able to use them for a dynamically loaded shared object\&. For instance with GCC you always just have to use -fpic\&. For other C compilers consult its manual page or at watch for the flags apxs uses to compile the object files\&.
+The arguments \fIfiles\fR can be any C source file (\&.c), a object file (\&.o) or even a library archive (\&.a)\&. The apxs2 tool automatically recognizes these extensions and automatically used the C source files for compilation while just using the object and archive files for the linking phase\&. But when using such pre-compiled objects make sure they are compiled for position independent code (PIC) to be able to use them for a dynamically loaded shared object\&. For instance with GCC you always just have to use -fpic\&. For other C compilers consult its manual page or at watch for the flags apxs2 uses to compile the object files\&.
  
 .PP
 For more details about DSO support in Apache read the documentation of mod_so or perhaps even read the src/modules/standard/mod_so\&.c source file\&.
@@ -89,28 +89,28 @@ For more details about DSO support in Apache read the 
  
 .TP
 -n \fImodname\fR
-This explicitly sets the module name for the -i (install) and -g (template generation) option\&. Use this to explicitly specify the module name\&. For option -g this is required, for option -i the apxs tool tries to determine the name from the source or (as a fallback) at least by guessing it from the filename\&.  
+This explicitly sets the module name for the -i (install) and -g (template generation) option\&. Use this to explicitly specify the module name\&. For option -g this is required, for option -i the apxs2 tool tries to determine the name from the source or (as a fallback) at least by guessing it from the filename\&.  
   
 .SS "Query Options"
  
  
 .TP
 -q
-Performs a query for variables and environment settings used to build httpd\&. When invoked without \fIquery\fR parameters, it prints all known variables and their values\&. The optional -v parameter formats the list output\&. .PP Use this to manually determine settings used to build the httpd that will load your module\&. For instance use INC=-I`apxs -q INCLUDEDIR` .PP inside your own Makefiles if you need manual access to Apache's C header files\&.  
+Performs a query for variables and environment settings used to build httpd\&. When invoked without \fIquery\fR parameters, it prints all known variables and their values\&. The optional -v parameter formats the list output\&. .PP Use this to manually determine settings used to build the httpd that will load your module\&. For instance use INC=-I`apxs2 -q INCLUDEDIR` .PP inside your own Makefiles if you need manual access to Apache's C header files\&.  
   
 .SS "Configuration Options"
  
  
 .TP
 -S \fIname\fR=\fIvalue\fR
-This option changes the apxs settings described above\&.  
+This option changes the apxs2 settings described above\&.  
   
 .SS "Template Generation Options"
  
  
 .TP
 -g
-This generates a subdirectory \fIname\fR (see option -n) and there two files: A sample module source file named mod_\fIname\fR\&.c which can be used as a template for creating your own modules or as a quick start for playing with the apxs mechanism\&. And a corresponding Makefile for even easier build and installing of this module\&.  
+This generates a subdirectory \fIname\fR (see option -n) and there two files: A sample module source file named mod_\fIname\fR\&.c which can be used as a template for creating your own modules or as a quick start for playing with the apxs2 mechanism\&. And a corresponding Makefile for even easier build and installing of this module\&.  
   
 .SS "DSO Compilation Options"
  
@@ -141,7 +141,7 @@ This option passes \fIcompiler-flags\fR as additional 
 This option passes \fIlinker-flags\fR as additional flags to the libtool --mode=link command\&. Use this to add local linker-specific options\&.  
 .TP
 -p
-This option causes apxs to link against the apr/apr-util libraries\&. This is useful when compiling helper programs that use the apr/apr-util libraries\&.  
+This option causes apxs2 to link against the apr/apr-util libraries\&. This is useful when compiling helper programs that use the apr/apr-util libraries\&.  
   
 .SS "DSO Installation and Configuration Options"
   
@@ -166,7 +166,7 @@ Assume you have an Apache module named mod_foo\&.c ava
  
 .nf
 
-      $ apxs -c mod_foo\&.c
+      $ apxs2 -c mod_foo\&.c
       /path/to/libtool --mode=compile gcc \&.\&.\&. -c mod_foo\&.c
       /path/to/libtool --mode=link gcc \&.\&.\&. -o mod_foo\&.la mod_foo\&.slo
       $ _
@@ -174,11 +174,11 @@ Assume you have an Apache module named mod_foo\&.c ava
 .fi
  
 .PP
-Then you have to update the Apache configuration by making sure a LoadModule directive is present to load this shared object\&. To simplify this step apxs provides an automatic way to install the shared object in its "modules" directory and updating the httpd\&.conf file accordingly\&. This can be achieved by running:
+Then you have to update the Apache configuration by making sure a LoadModule directive is present to load this shared object\&. To simplify this step apxs2 provides an automatic way to install the shared object in its "modules" directory and updating the httpd\&.conf file accordingly\&. This can be achieved by running:
  
 .nf
 
-      $ apxs -i -a mod_foo\&.la
+      $ apxs2 -i -a mod_foo\&.la
       /path/to/instdso\&.sh mod_foo\&.la /path/to/apache/modules
       /path/to/libtool --mode=install cp mod_foo\&.la /path/to/apache/modules
       \&.\&.\&.
@@ -202,16 +202,16 @@ is added to the configuration file if still not presen
  
 .nf
 
-      $ apxs -i -A mod_foo\&.c
+      $ apxs2 -i -A mod_foo\&.c
     
 .fi
  
 .PP
-For a quick test of the apxs mechanism you can create a sample Apache module template plus a corresponding Makefile via:
+For a quick test of the apxs2 mechanism you can create a sample Apache module template plus a corresponding Makefile via:
  
 .nf
 
-      $ apxs -g -n foo
+      $ apxs2 -g -n foo
       Creating [DIR]  foo
       Creating [FILE] foo/Makefile
       Creating [FILE] foo/modules\&.mk
@@ -228,19 +228,19 @@ Then you can immediately compile this sample module in
 
       $ cd foo
       $ make all reload
-      apxs -c mod_foo\&.c
+      apxs2 -c mod_foo\&.c
       /path/to/libtool --mode=compile gcc \&.\&.\&. -c mod_foo\&.c
       /path/to/libtool --mode=link gcc \&.\&.\&. -o mod_foo\&.la mod_foo\&.slo
-      apxs -i -a -n "foo" mod_foo\&.la
+      apxs2 -i -a -n "foo" mod_foo\&.la
       /path/to/instdso\&.sh mod_foo\&.la /path/to/apache/modules
       /path/to/libtool --mode=install cp mod_foo\&.la /path/to/apache/modules
       \&.\&.\&.
       chmod 755 /path/to/apache/modules/mod_foo\&.so
       [activating module `foo' in /path/to/apache/conf/httpd\&.conf]
-      apachectl restart
-      /path/to/apache/sbin/apachectl restart: httpd not running, trying to start
+      apachectl2 restart
+      /path/to/apache/sbin/apachectl2 restart: httpd2 not running, trying to start
       [Tue Mar 31 11:27:55 1998] [debug] mod_so\&.c(303): loaded module foo_module
-      /path/to/apache/sbin/apachectl restart: httpd started
+      /path/to/apache/sbin/apachectl2 restart: httpd2 started
       $ _
     
 .fi
