$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.20 2015/04/27 16:38:25 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed Apr 15 00:31:22 2015
+++ content/browser/child_process_launcher.cc	Wed Apr 15 08:32:50 2015
@@ -120,7 +120,7 @@ class ChildProcessLauncher::Context
   // Notifies the client about the result of the operation.
   // Runs on the UI thread.
   void Notify(
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
       bool zygote,
 #endif
       base::Process process);
@@ -131,7 +131,7 @@ class ChildProcessLauncher::Context
                                              bool background);
 
   static void TerminateInternal(
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
       bool zygote,
 #endif
       base::Process process);
@@ -144,7 +144,7 @@ class ChildProcessLauncher::Context
 #if defined(OS_ANDROID)
   // The fd to close after creating the process.
   base::ScopedFD ipcfd_;
-#elif defined(OS_POSIX) && !defined(OS_MACOSX)
+#elif defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_BSD)
   bool zygote_;
 #endif
   bool starting_;
@@ -158,7 +158,7 @@ ChildProcessLauncher::Context::Context()
       client_thread_id_(BrowserThread::UI),
       termination_status_(base::TERMINATION_STATUS_NORMAL_TERMINATION),
       exit_code_(RESULT_CODE_NORMAL_EXIT),
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
       zygote_(false),
 #endif
       starting_(true),
@@ -238,7 +238,7 @@ void ChildProcessLauncher::Context::ResetClient() {
 }
 
 void ChildProcessLauncher::Context::UpdateTerminationStatus(bool known_dead) {
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
   if (zygote_) {
     termination_status_ = ZygoteHostImpl::GetInstance()->
         GetTerminationStatus(process_.Handle(), known_dead, &exit_code_);
@@ -246,7 +246,7 @@ void ChildProcessLauncher::Context::UpdateTerminationS
     termination_status_ =
         base::GetKnownDeadTerminationStatus(process_.Handle(), &exit_code_);
   } else {
-#elif defined(OS_MACOSX)
+#elif defined(OS_MACOSX) || defined(OS_BSD)
   if (known_dead) {
     termination_status_ =
         base::GetKnownDeadTerminationStatus(process_.Handle(), &exit_code_);
@@ -316,7 +316,9 @@ void ChildProcessLauncher::Context::LaunchInternal(
   base::EnvironmentMap env = delegate->GetEnvironment();
   base::ScopedFD ipcfd = delegate->TakeIpcFd();
 #elif defined(OS_POSIX)
+#if !defined(OS_BSD)
   bool use_zygote = delegate->ShouldUseZygote();
+#endif
   base::EnvironmentMap env = delegate->GetEnvironment();
   base::ScopedFD ipcfd = delegate->TakeIpcFd();
 #endif
@@ -366,7 +368,7 @@ void ChildProcessLauncher::Context::LaunchInternal(
   // We need to close the client end of the IPC channel to reliably detect
   // child termination.
 
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
   GetContentClient()->browser()->GetAdditionalMappedFilesForChildProcess(
       *cmd_line, child_process_id, files_to_register.get());
   if (use_zygote) {
@@ -382,7 +384,7 @@ void ChildProcessLauncher::Context::LaunchInternal(
         files_to_register->GetMappingWithIDAdjustment(
             base::GlobalDescriptors::kBaseDescriptor);
 
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
     if (process_type == switches::kRendererProcess) {
       const int sandbox_fd =
           RenderSandboxHostLinux::GetInstance()->GetRendererSocket();
@@ -446,7 +448,7 @@ void ChildProcessLauncher::Context::LaunchInternal(
       client_thread_id, FROM_HERE,
       base::Bind(&Context::Notify,
                  this_object.get(),
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_BSD)
                  use_zygote,
 #endif
                  base::Passed(&process)));
@@ -454,7 +456,7 @@ void ChildProcessLauncher::Context::LaunchInternal(
 }
 
 void ChildProcessLauncher::Context::Notify(
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
     bool zygote,
 #endif
     base::Process process) {
@@ -467,7 +469,7 @@ void ChildProcessLauncher::Context::Notify(
   if (!process_.IsValid())
     LOG(ERROR) << "Failed to launch child process";
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
   zygote_ = zygote;
 #endif
   if (client_) {
@@ -493,7 +495,7 @@ void ChildProcessLauncher::Context::Terminate() {
   BrowserThread::PostTask(
       BrowserThread::PROCESS_LAUNCHER, FROM_HERE,
       base::Bind(&Context::TerminateInternal,
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
                 zygote_,
 #endif
                 base::Passed(&process_)));
@@ -511,7 +513,7 @@ void ChildProcessLauncher::Context::SetProcessBackgrou
 
 // static
 void ChildProcessLauncher::Context::TerminateInternal(
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
     bool zygote,
 #endif
     base::Process process) {
@@ -525,7 +527,7 @@ void ChildProcessLauncher::Context::TerminateInternal(
   process.Terminate(RESULT_CODE_NORMAL_EXIT);
   // On POSIX, we must additionally reap the child.
 #if defined(OS_POSIX)
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
   if (zygote) {
     // If the renderer was created via a zygote, we have to proxy the reaping
     // through the zygote process.
