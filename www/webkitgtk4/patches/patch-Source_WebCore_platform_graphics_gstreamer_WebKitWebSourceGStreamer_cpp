$OpenBSD: patch-Source_WebCore_platform_graphics_gstreamer_WebKitWebSourceGStreamer_cpp,v 1.1 2015/03/27 16:03:07 ajacoutot Exp $

https://trac.webkit.org/changeset/179866

--- Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp.orig	Thu Jan 15 10:40:35 2015
+++ Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp	Thu Mar 26 13:23:37 2015
@@ -353,7 +353,7 @@ static void webKitWebSrcGetProperty(GObject* object, g
     WebKitWebSrc* src = WEBKIT_WEB_SRC(object);
     WebKitWebSrcPrivate* priv = src->priv;
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     switch (propID) {
     case PROP_IRADIO_NAME:
         g_value_set_string(value, priv->iradioName);
@@ -393,7 +393,7 @@ static void webKitWebSrcStop(WebKitWebSrc* src)
 
     ASSERT(isMainThread());
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     bool seeking = priv->seekSource.isActive();
 
@@ -449,7 +449,7 @@ static void webKitWebSrcStart(WebKitWebSrc* src)
 
     ASSERT(isMainThread());
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     priv->pendingStart = FALSE;
     priv->corsAccessCheck = CORSNoCheck;
@@ -542,7 +542,7 @@ static GstStateChangeReturn webKitWebSrcChangeState(Gs
         return ret;
     }
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     switch (transition) {
     case GST_STATE_CHANGE_READY_TO_PAUSED:
         GST_DEBUG_OBJECT(src, "READY->PAUSED");
@@ -579,7 +579,7 @@ static gboolean webKitWebSrcQueryWithParent(GstPad* pa
         gst_query_parse_duration(query, &format, NULL);
 
         GST_DEBUG_OBJECT(src, "duration query in format %s", gst_format_get_name(format));
-        GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+        WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
         if (format == GST_FORMAT_BYTES && src->priv->size > 0) {
             gst_query_set_duration(query, format, src->priv->size);
             result = TRUE;
@@ -587,7 +587,7 @@ static gboolean webKitWebSrcQueryWithParent(GstPad* pa
         break;
     }
     case GST_QUERY_URI: {
-        GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+        WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
         gst_query_set_uri(query, src->priv->uri);
         result = TRUE;
         break;
@@ -637,7 +637,7 @@ static gchar* webKitWebSrcGetUri(GstURIHandler* handle
     WebKitWebSrc* src = WEBKIT_WEB_SRC(handler);
     gchar* ret;
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     ret = g_strdup(src->priv->uri);
     return ret;
 }
@@ -652,7 +652,7 @@ static gboolean webKitWebSrcSetUri(GstURIHandler* hand
         return FALSE;
     }
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     g_free(priv->uri);
     priv->uri = 0;
@@ -688,7 +688,7 @@ static void webKitWebSrcNeedDataMainCb(WebKitWebSrc* s
 
     ASSERT(isMainThread());
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     priv->paused = FALSE;
     locker.unlock();
 
@@ -703,7 +703,7 @@ static void webKitWebSrcNeedDataCb(GstAppSrc*, guint l
 
     GST_DEBUG_OBJECT(src, "Need more data: %u", length);
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     if (priv->needDataSource.isScheduled() || !priv->paused)
         return;
 
@@ -718,7 +718,7 @@ static void webKitWebSrcEnoughDataMainCb(WebKitWebSrc*
 
     ASSERT(isMainThread());
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     priv->paused = TRUE;
     locker.unlock();
 
@@ -733,7 +733,7 @@ static void webKitWebSrcEnoughDataCb(GstAppSrc*, gpoin
 
     GST_DEBUG_OBJECT(src, "Have enough data");
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     if (priv->enoughDataSource.isScheduled() || priv->paused)
         return;
 
@@ -756,7 +756,7 @@ static gboolean webKitWebSrcSeekDataCb(GstAppSrc*, gui
     WebKitWebSrcPrivate* priv = src->priv;
 
     GST_DEBUG_OBJECT(src, "Seeking to offset: %" G_GUINT64_FORMAT, offset);
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     if (offset == priv->offset && priv->requestedOffset == priv->offset)
         return TRUE;
 
@@ -775,7 +775,7 @@ static gboolean webKitWebSrcSeekDataCb(GstAppSrc*, gui
 void webKitWebSrcSetMediaPlayer(WebKitWebSrc* src, WebCore::MediaPlayer* player)
 {
     ASSERT(player);
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     src->priv->player = player;
 }
 
@@ -805,7 +805,7 @@ char* StreamingClient::createReadBuffer(size_t request
 
     mapGstBuffer(buffer);
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     priv->buffer = adoptGRef(buffer);
     locker.unlock();
 
@@ -831,7 +831,7 @@ void StreamingClient::handleResponseReceived(const Res
         return;
     }
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     priv->corsAccessCheck = corsAccessCheck;
 
@@ -930,7 +930,7 @@ void StreamingClient::handleDataReceived(const char* d
     WebKitWebSrc* src = WEBKIT_WEB_SRC(m_src);
     WebKitWebSrcPrivate* priv = src->priv;
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     GST_LOG_OBJECT(src, "Have %lld bytes of data", priv->buffer ? static_cast<long long>(gst_buffer_get_size(priv->buffer.get())) : length);
 
@@ -999,7 +999,7 @@ void StreamingClient::handleNotifyFinished()
 
     GST_DEBUG_OBJECT(src, "Have EOS");
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     if (!priv->seekSource.isActive()) {
         locker.unlock();
         gst_app_src_end_of_stream(priv->appsrc);
@@ -1158,7 +1158,7 @@ void ResourceHandleStreamingClient::wasBlocked(Resourc
 
     GST_ERROR_OBJECT(src, "Request was blocked");
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     uri.reset(g_strdup(src->priv->uri));
     locker.unlock();
 
@@ -1172,7 +1172,7 @@ void ResourceHandleStreamingClient::cannotShowURL(Reso
 
     GST_ERROR_OBJECT(src, "Cannot show URL");
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     uri.reset(g_strdup(src->priv->uri));
     locker.unlock();
 
