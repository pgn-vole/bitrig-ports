$OpenBSD: patch-clamav-unofficial-sigs_sh,v 1.3 2015/04/24 12:33:47 sthen Exp $
--- clamav-unofficial-sigs.sh.orig	Tue Aug 27 17:08:25 2013
+++ clamav-unofficial-sigs.sh	Fri Apr 24 13:32:31 2015
@@ -23,6 +23,8 @@ output_ver="
    `basename $0` $version
 "
 
+pkg_mgr="pkg_add"
+pkg_rm="pkg_delete"
 usage="
 ClamAV Unofficial Signature Databases Update Script - $version
 
@@ -479,7 +481,7 @@ while getopts 'bc:defg:himrs:tvw' option ; do
                 echo "File '$input' cannot be found."
                 echo "Here is a list of third-party databases that can be clamscan integrity tested:"
                 echo ""
-                echo "Sanesecurity $ss_dbs""SecuriteInfo $si_dbs""MalwarePatrol $mbl_dbs"
+                echo "Sanesecurity $ss_dbs""MalwarePatrol $mbl_dbs"
                 echo "Check the file name and try again..."
           fi
           echo ""
@@ -667,7 +669,7 @@ fi
 
 # Check to see if the working directories have been created.
 # If not, create them.  Otherwise, ignore and proceed with script.
-mkdir -p "$work_dir" "$ss_dir" "$si_dir" "$mbl_dir" "$config_dir" "$gpg_dir" "$add_dir"
+mkdir -p "$work_dir" "$ss_dir" "$mbl_dir" "$config_dir" "$gpg_dir" "$add_dir"
 
 # Set secured access permissions to the GPG directory
 chmod 0700 "$gpg_dir"
@@ -752,7 +754,6 @@ fi
 
 # Unofficial ClamAV database provider URLs
 ss_url="rsync.sanesecurity.net"
-si_url="clamav.securiteinfo.com"
 mbl_url="www.malwarepatrol.net"
 
 # Create the Sanesecurity rsync "include" file (defines which files to download).
@@ -791,12 +792,6 @@ if [ -n "$ss_dbs" ] ; then
       clamav_files
    done
 fi
-if [ -n "$si_dbs" ] ; then
-   for db in $si_dbs ; do
-      echo "$si_dir/$db" >> "$current_tmp"
-      clamav_files
-   done
-fi
 if [ -n "$mbl_dbs" ] ; then
    for db in $mbl_dbs ; do
       echo "$mbl_dir/$db" >> "$current_tmp"
@@ -983,7 +978,7 @@ fi
 
 # Check and save current system time since epoch for time related database downloads.
 # However, if unsuccessful, issue a warning that we cannot calculate times since epoch.
-if [ -n "$si_dbs" -o -n "mbl_dbs" ]
+if [ -n "mbl_dbs" ]
    then
       if [ `date +%s` -gt 0 2>/dev/null ]
          then
@@ -997,13 +992,12 @@ if [ -n "$si_dbs" -o -n "mbl_dbs" ]
       echo ""
       echo "                           --- WARNING ---"
       echo "The system's date function does not appear to support 'date +%s', nor was 'perl' found"
-      echo "on the system.  The SecuriteInfo and MalwarePatrol updates were bypassed at this time."
+      echo "on the system.  The MalwarePatrol updates were bypassed at this time."
       echo ""
-      echo "You can silence this warning by either commenting out the 'si_dbs' and 'mbl_dbs'"
-      echo "variables in the 'USER CONFIGURATION' section of the script, or by installing perl or"
+      echo "You can silence this warning by either commenting out the 'mbl_dbs' variables"
+      echo "in the 'USER CONFIGURATION' section of the script, or by installing perl or"
       echo "the GNU date utility, either of which can calculate the needed seconds since epoch."
-      log "WARNING - Systems does not support calculating time since epoch, SecuriteInfo and MalwarePatrol updates bypassed"
-      si_dbs=""
+      log "WARNING - Systems does not support calculating time since epoch, MalwarePatrol updates bypassed"
       mbl_dbs=""
 fi
 
@@ -1122,143 +1116,6 @@ if [ -n "$ss_dbs" ] ; then
       echo "or signature database name(s) misspelled in the script's configuration file."
       log "WARNING - Access to all Sanesecurity mirror sites failed - Check for connectivity issues"
       log "WARNING - or signature database name(s) misspelled in the script's configuration file."
-   fi
-fi
-
-#######################################################################
-# Check for updated SecuriteInfo database files every set number of   #
-# hours as defined in the "USER CONFIGURATION" section of this script #
-#######################################################################
-if [ -n "$si_dbs" ] ; then
-   rm -f "$si_dir/*.gz"
-   if [ -s "$config_dir/last-si-update.txt" ]
-      then
-         last_si_update=`cat $config_dir/last-si-update.txt`
-      else
-         last_si_update="0"
-   fi
-   db_file=""
-   loop=""
-   update_interval=$(($si_update_hours * 3600))
-   time_interval=$(($current_time - $last_si_update))
-   if [ "$time_interval" -ge $(($update_interval - 600)) ]
-      then
-         echo "$current_time" > "$config_dir"/last-si-update.txt
-         comment ""
-         comment "======================================================================"
-         comment "SecuriteInfo Database File Updates"
-         comment "======================================================================"
-         log "INFO - Checking for SecuriteInfo updates..."
-         si_updates="0"
-         for db_file in $si_dbs ; do
-            if [ "$loop" = "1" ]
-               then
-                  comment "---"
-               else
-                  comment ""
-            fi
-            comment "Checking for updated SecuriteInfo database file: $db_file"
-            comment ""
-            si_db_update="0"
-            if [ -s "$si_dir/$db_file" ]
-               then
-                  z_opt="-z $si_dir/$db_file"
-               else
-                  z_opt=""
-            fi
-            if curl $curl_proxy $curl_output_level --connect-timeout "$curl_connect_timeout" \
-               --max-time "$curl_max_time" -L -R $z_opt -o $si_dir/$db_file http://$si_url/$db_file
-               then
-                  loop="1"
-                  if ! cmp -s $si_dir/$db_file $clam_dbs/$db_file ; then
-                     if [ "$?" = "0" ] ; then
-                        db_ext=`echo $db_file | cut -d "." -f2`
-			comment ""
-                        comment "Testing updated SecuriteInfo database file: $db_file"
-                        log "INFO - Testing updated SecuriteInfo database file: $db_file"
-                        if [ -z "$ham_dir" -o "$db_ext" != "ndb" ]
-                           then
-                              if clamscan --quiet -d "$si_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                 then
-                                    comment "Clamscan reports SecuriteInfo $db_file database integrity tested good"
-                                    log "INFO - Clamscan reports SecuriteInfo $db_file database integrity tested good" ; true
-                                 else
-                                    echo "Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING"
-                                    log "WARNING - Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING" ; false
-                                    rm -f "$si_dir/$db_file"
-                              fi && \
-                              (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                              if rsync -pcqt $si_dir/$db_file $clam_dbs
-                                 then
-                                    perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                    comment "Successfully updated SecuriteInfo production database file: $db_file"
-                                    log "INFO - Successfully updated SecuriteInfo production database file: $db_file"
-                                    si_updates=1
-                                    si_db_update=1
-                                    do_clamd_reload=1
-                                 else
-                                    echo "Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                                    log "WARNING - Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                              fi
-                           else
-                              grep -h -v -f "$config_dir/whitelist.hex" "$si_dir/$db_file" > "$test_dir/$db_file"
-                              clamscan --infected --no-summary -d "$test_dir/$db_file" "$ham_dir"/* | \
-                              sed 's/\.UNOFFICIAL FOUND//' | awk '{print $NF}' > "$config_dir/whitelist.txt"
-                              grep -h -f "$config_dir/whitelist.txt" "$test_dir/$db_file" | \
-                              cut -d "*" -f2 | sort | uniq >> "$config_dir/whitelist.hex"
-                              grep -h -v -f "$config_dir/whitelist.hex" "$test_dir/$db_file" > "$test_dir/$db_file-tmp"
-                              mv -f "$test_dir/$db_file-tmp" "$test_dir/$db_file"
-                              if clamscan --quiet -d "$test_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                 then
-                                    comment "Clamscan reports SecuriteInfo $db_file database integrity tested good"
-                                    log "INFO - Clamscan reports SecuriteInfo $db_file database integrity tested good" ; true
-                                 else
-                                    echo "Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING"
-                                    log "WARNING - Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING" ; false
-                                    rm -f "$si_dir/$db_file"
-                              fi && \
-                              (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                              if rsync -pcqt $test_dir/$db_file $clam_dbs
-                                 then
-                                    perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                    comment "Successfully updated SecuriteInfo production database file: $db_file"
-                                    log "INFO - Successfully updated SecuriteInfo production database file: $db_file"
-                                    si_updates=1
-                                    si_db_update=1
-                                    do_clamd_reload=1
-                                 else
-                                    echo "Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                                    log "WARNING - Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                              fi
-                        fi
-                     fi
-                  fi
-               else
-                  log "WARNING - Failed curl connection to $si_url - SKIPPED SecuriteInfo $db_file update"
-            fi
-            if [ "$si_db_update" != "1" ] ; then
-               comment ""
-               comment "No updated SecuriteInfo $db_file database file found"
-            fi
-         done
-         if [ "$si_updates" != "1" ] ; then
-            log "INFO - No SecuriteInfo database file updates found"
-         fi
-      else
-         comment ""
-         comment "======================================================================"
-         comment "SecuriteInfo Database File Updates"
-         comment "======================================================================"
-         comment ""
-         time_remaining=$(($update_interval - $time_interval))
-         hours_left=$(($time_remaining / 3600))
-         minutes_left=$(($time_remaining % 3600 / 60))
-         comment "$si_update_hours hours have not yet elapsed since the last SecuriteInfo update check"
-         comment ""
-         comment "     --- No update check was performed at this time ---"
-         comment ""
-         comment "Next check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
-         log "INFO - Next SecuriteInfo check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
    fi
 fi
 
